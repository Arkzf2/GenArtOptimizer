import streamlit as st
import openai
import re
import os
import requests
import json
from PIL import Image
from io import BytesIO
import time

openai.api_key = os.getenv('OPENAI_API_KEY')
mj_api_key = os.getenv('MJ_API_KEY')

rule = """
You are acting as a prompt generator and optimizer for an AI image generator. 

You will be given an initial prompt, and your task is to generate several textual prompts incorporating the initial prompt. 

These prompts should:
1. Clarity and Certainty. Be as specific as possible about the scene, including color, shape, objects, and even light and atmosphere. Provide as clear and specific a description as possible. If enter "a house" for example, try “An old country house with an old oak tree and the sky at sunset.”.
2. Creativity. Using original and unique descriptions can help create unique images. Try using unusual metaphors and figurative language.
3. Understand the limitations of AI. While it can produce very complex and detailed images, it does not fully understand what it is generating. Therefore, some more abstract or culturally specific concepts may not be accurately understood and generated by AI.
4. Use sensory language. Use words that describe color, texture, light, and atmosphere to help the AI image generator better understand the visual effects.
5. Use elements and styles. If you want an image that has a particular artistic style or element, such as impressionism or Cubism, or you want the style of a particular artist, such as Vincent van Gogh or Picasso, you can specify this in the prompt.
6. The prompt you generate should follow a rough structure like "theme + medium + background + lighting + color scheme + artist + atmosphere + perspective + lens + composition + artistic style + resolution". Don't follow the structure strictly but add some other keywords that may related with the initial prompt. Finally sperate them with ",".

For example, if given the prompt "long-hair woman, style by WLOP", you might generate: "Gorgeous woman, peaceful, innocent, tranquil, long flowing hair, liquid rococo fractal, James Jean, Rutkowski, fluid acrylic, elegant gradients, intricate, octane render, depth, Kaluta, detailed eyes, incredibly detailed, hyperrealistic, pastel colours, Artgerm, WLOP, Rutkowski, fractal, 8k".
"""

def get_completion(prompt, model='gpt-3.5-turbo'):
    messages = [{'role': 'user', 'content': prompt}]
    response = openai.ChatCompletion.create(
        model = model,
        messages = messages,
        temperature = 0.8,
    )
    return response['choices'][0]['message']['content']

def init2gene_prompt(init_prompt, n):
    prompt = f"""
    {rule}

    Given the initial prompt: {init_prompt}, generate {n} different prompts, incorporating the initial prompt. Each prompt should be slightly different, and all should include the elements of the given initial prompt.
    
    List your prompts as follows:
    1. <prompt1>
    2. <prompt2>
    ...
    {n}. <prompt{n}>
    """
    response = get_completion(prompt)
    prompt_list = re.split('\d+\.', response.strip())
    prompt_list = [prompt.strip() for prompt in prompt_list if prompt]
    return prompt_list

def parent2child_prompt(init_prompt, prompt_A, prompt_B, n):
    prompt = f"""
    In the same way that a genetic algorithm might perform crossover and mutation between two individuals to make a population of new children, \
    take the text in the parent prompt: {prompt_A} and {prompt_B}, and recombine them into {n} child prompts for the AI image generator.
    Follow the rule delimited by triple backticks ```{rule}```
    Each child prompt should be slightly different from each other and all should include the elements of the given initial prompt: {init_prompt}.
    
    List your prompts as follows:
    1. <prompt1>
    2. <prompt2>
    ...
    {n}. <prompt{n}>
    """
    response = get_completion(prompt)
    prompt_list = re.split('\d+\.', response.strip())
    prompt_list = [prompt.strip() for prompt in prompt_list if prompt]
    return prompt_list

@st.cache_data
def imagine(prompt):
  headers = {
  'Authorization': f'Bearer {mj_api_key}',
  'Content-Type': 'application/json'
  }

  url = "https://api.thenextleg.io/v2/imagine"

  payload_image = json.dumps({
  "msg": prompt,
  "ref": "",
  "webhookOverride": "", 
  "ignorePrefilter": "false"
  })

  response_image = requests.request("POST", url, headers=headers, data=payload_image)
  messageId = response_image.json().get('messageId')

  url = f"https://api.thenextleg.io/v2/message/{messageId}?expireMins=2"
  
  def check_task_status():
    while True:
      response_result = requests.request("GET", url, headers=headers)
      if response_result.status_code == 200:
        json_response = json.loads(response_result.text)
        progress = json_response['progress']
        if progress == 100:
          return json_response["response"]['imageUrl']
      else:
        print(f"Request failed, status code: {response_result.status_code}")
      time.sleep(3)

  if messageId:
    img_url = check_task_status()
    return img_url

def main():

    if 'all_prompt_lists' not in st.session_state:
        st.session_state['all_prompt_lists'] = [None] * 1000
    
    if 'all_selected_lists' not in st.session_state:
        st.session_state['all_selected_lists'] = [None] * 1000

    if 'init_prompt' not in st.session_state:
        st.session_state['init_prompt'] = ""

    if 'count' not in st.session_state:
        st.session_state['count'] = 1

    if 'choices' not in st.session_state:
        st.session_state['choices'] = [None] * 1000

    if 'img_cache' not in st.session_state:
        st.session_state['img_cache'] = {}

    st.title("Genjourney:dna:")

    st.session_state['init_prompt'] = st.text_input("**Enter your initial prompt**")
    if st.button("**Generate prompts**", key="init_list_button"):
        st.session_state['all_prompt_lists'][0] = init2gene_prompt(st.session_state['init_prompt'], 5)

    if st.session_state['all_prompt_lists'][0] is not None:
        st.write("**Initial generated prompts:**")
        for i in range(5):
            prompt = st.session_state['all_prompt_lists'][0][i]
            st.write(i + 1, prompt)

            img = st.session_state['img_cache'].get(prompt)
            if img is None:
                img = imagine(prompt)
                st.session_state['img_cache'][prompt] = img
            st.image(img, use_column_width=True)

        for i in range(st.session_state['count']):
            container = st.container()
            prompt_list = st.session_state['all_prompt_lists'][i]
            selected_nums = container.multiselect(f"**Select two prompts as parent prompts**", range(1, 6), key=f"multi_select_{i}")
            if len(selected_nums) == 2:
                selected_prompts = [prompt_list[selected_nums[0] - 1], prompt_list[selected_nums[1] - 1]]
            if len(selected_nums) == 2 and st.button(f"**Generate child prompts**", key=f"button_{i}"):
                st.session_state['choices'][i] = selected_prompts
                child_prompts = parent2child_prompt(st.session_state['init_prompt'], selected_prompts[0], selected_prompts[1], 5)
                st.session_state['all_prompt_lists'][i+1] = child_prompts
                st.session_state['all_selected_lists'][i] = selected_prompts
                if i + 1 == st.session_state['count']:
                    st.session_state['count'] += 1
                    st.experimental_rerun()
            
            if st.session_state['choices'][i] is not None:
                st.write(f"**Your selcetion from Generation {i}:**")
                for j in range(2):
                    st.write(j + 1, st.session_state['all_selected_lists'][i][j])
                st.write("\n")
                st.write(f"**Generation {i + 1}:**")
                for j in range(5):
                    prompt = st.session_state['all_prompt_lists'][i + 1][j]
                    st.write(j + 1, prompt)

                    img = st.session_state['img_cache'].get(prompt)
                    if img is None:
                        img = imagine(prompt)
                        st.session_state['img_cache'][prompt] = img
                    st.image(img, use_column_width=True)
                    
    if st.button(':violet[**Try another initial prompt**]:leftwards_arrow_with_hook:', key="refresh"):
        st.session_state['all_prompt_lists'] = [None] * 1000
        st.session_state['all_selected_lists'] = [None] * 1000
        st.session_state['init_prompt'] = ""
        st.session_state['count'] = 1
        st.session_state['choices'] = [None] * 1000
        st.experimental_rerun()

if __name__ == '__main__':
    main()